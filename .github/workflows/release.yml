name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.target.os }}
    strategy:
      matrix:
        target:
          - os: ubuntu-20.04
            triple: x86_64-unknown-linux-gnu
          - os: macos-14
            triple: aarch64-apple-darwin
          - os: windows-latest
            triple: x86_64-pc-windows-gnu
        include:
          - features: build-assimp,prebuilt,static-link
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # LLVM comes preinstalled on Windows runners
      - name: Install LLVM
        shell: bash
        run: |
          if [ "$RUNNER_OS" == 'Linux' ]; then
            sudo apt-get update
            sudo apt-get install llvm-dev libclang-dev clang
          elif [ "$RUNNER_OS" == 'macOS' ]; then
            brew install llvm
          fi

      # CMake and Rust are preinstalled on all runners.

      - name: Update Rust
        run: |
          rustup default stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Package Assimp
        run: cargo run -vv --release --bin package --target ${{ matrix.target.triple }} --features ${{ matrix.features }}
        env:
          RUSSIMP_PACKAGE_DIR: ./russimp-package
          LDFLAGS: "${{ runner.os == 'macOS' && '-L/opt/homebrew/opt/llvm/lib' || '' }}"
          DYLD_FALLBACK_LIBRARY_PATH: "${{ runner.os == 'macOS' && '/opt/homebrew/opt/llvm/lib' || '' }}"
          # I'm not sure why this is needed, but it fixes missing symbols when linking in the final executable due
          # to libz not being considered. Hacky!
          RUSTFLAGS: -C link-args=-lz

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: russimp-packages
          path: ${{ env.RUSSIMP_PACKAGE_DIR }}/*
        env:
          RUSSIMP_PACKAGE_DIR: ./russimp-package